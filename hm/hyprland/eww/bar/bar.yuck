(defwidget barmenu_layout []
  (box :class "bar" 
    :orientation "h"
    (left)
    (middle)
    (right)
  )
)

(defwidget left []
  (box
    :space-evenly false
    :halign "start"
    :orientation "h"
    (_dashboard)
    (_workspaces)
  )
)

(defwidget middle []
  (box
    :space-evenly false
    :halign "center"
    (_time)
  )
)

(defwidget right []
  (box
    :space-evenly false
    :halign "end"
    (_network)
    (_audio)
    (_blight)
    (_bat :cap {EWW_BATTERY == "" ? "" : EWW_BATTERY.BAT0.capacity}
          :status {EWW_BATTERY == "" ? "" : EWW_BATTERY.BAT0.status}
    )
  )
)

(defwidget _dashboard []
  (box :class "bar-item"
    (button
      :class "bar-home-symbol"
      :onclick "./scripts/dashboard ${EWW_CMD}"
    )
  )
)

(defwidget _workspaces []
  (box
    (__workspace :nr 1 :exists ws_1)
    (__workspace :nr 2 :exists ws_2)
    (__workspace :nr 3 :exists ws_3)
    (__workspace :nr 4 :exists ws_4)
    (__workspace :nr 5 :exists ws_5)
    (__workspace :nr 6 :exists ws_6)
    (__workspace :nr 7 :exists ws_7)
    (__workspace :nr 8 :exists ws_8)
    (__workspace :nr 9 :exists ws_9)
  )
)

(defwidget __workspace [ nr exists ]
  (button :class "bar-item bar-workspace 
                  ${ws_active == nr ? "bar-ws_active" : ""} 
                  ${exists ? "bar-ws_exists" : ""}"
    :onclick "hyprctl dispatch workspace ${nr} && scripts/workspaces ${nr}"
    (label :text nr)
  )
)

(defwidget _time []
  (eventbox
    :onhover "${EWW_CMD} update TIME_HOVER=true"
    :onhoverlost "${EWW_CMD} update TIME_HOVER=false"
    (box :class "bar-item"
      :space-evenly false
      (revealer 
        :transition "slideleft" 
			  :reveal TIME_HOVER
			  :duration "550ms"
        (label
          :class "bar-text"
          :text "${time.weekday}, ${time.day}.${time.month}.${time.year} - "
          :text {formattime(EWW_TIME, "%a, %d.%m.%Y -")}
        )
      )
      (label
        :class "bar-text"
        :text {formattime(EWW_TIME, "%H:%M")}
      )
	    (revealer 
        :transition "slideright" 
			  :reveal TIME_HOVER
			  :duration "550ms"
        (label
          :class "bar-text"
          :text {formattime(EWW_TIME, ":%S")}
        )
      )
    )
  )
)

(defwidget _network []
  (box :class "bar-item"
    :tooltip NET_CON
    (box :class { NET_TYPE == "wired" ? "bar-net_wired-symbol"
                : NET_TYPE == "wifi" ? "bar-net_wifi-symbol"
                : "bar-net_none-symbol"}
    )
  )
)

(defwidget _audio []
  (eventbox 
    :onhover "${EWW_CMD} update BAR-AUDIO_HOVER=true"
    :onhoverlost "${EWW_CMD} update BAR-AUDIO_HOVER=false"
    :tooltip "Volume: ${SINK.VOL}"
  	(box :class "bar-item"
      :space-evenly false
      (box
        :class {SINK.MUTE == "MUTED" ? "bar-speakerx-symbol"
                : SINK.VOL < 20 ? "bar-speaker0-symbol"
                : SINK.VOL < 60 ? "bar-speaker1-symbol"
                : "bar-speaker2-symbol"}
        (button :onclick "${EWW_CMD} update SINK=$(./scripts/audio --toggle-sink)")
      )
  		(revealer :transition "slideright" 
			  :reveal BAR-AUDIO_HOVER
			  :duration "550ms"
  			(scale 
          :class "bar-audio_slide" 
			    :value {SINK.VOL}
				  :onchange "./scripts/audio --set-sink {}"
				  :max 101 
				  :min 0
        )
      )
  	)
  )
)

(defwidget _blight []
  (eventbox
    :onhover "${EWW_CMD} update BAR-BLIGHT_HOVER=true"
    :onhoverlost "${EWW_CMD} update BAR-BLIGHT_HOVER=false"
    (box :class "bar-item"
      :space-evenly false
      (box :class "bar-blight-symbol")
      (revealer 
        :transition "slideright"
        :reveal BAR-BLIGHT_HOVER
        :duration "550ms"
        (scale
          :class "bar-blight_slide"
          :value BLIGHT
          :tooltip "Brightness: ${BLIGHT}%"
          :onchange "brightnessctl set {}%"
          :max 101
          :min 1
        )
      )
  	)
  )
)

(defwidget _bat [ cap status ]
  (box :class "bar-item"
    :active {cap == "" ? false : true}
    (eventbox
      :onhover `${EWW_CMD} update BAR-BAT_HOVER=true;
                ${EWW_CMD} update BAT_INFO="$(acpi | awk -F '%, ' '{print $2}')"`
      :onhoverlost "${EWW_CMD} update BAR-BAT_HOVER=false"
      :tooltip BAT_INFO
      :class { cap == "" ? ""
        : BAR-BAT_HOVER ? "bar-bat-hover"
        : status == "Charging" ? "bar-batc-symbol"
        : cap < 20 ? "bar-bat0-symbol" 
        : cap < 40 ? "bar-bat1-symbol"
        : cap < 60 ? "bar-bat2-symbol"
        : cap < 80 ? "bar-bat3-symbol"
        : "bar-bat4-symbol"}
      (label
        :class { BAR-BAT_HOVER ? "bar-text" : "hidden" }
        :text "${cap}%"
        :valign "center"
        :halign "center"
      )
    )
  )
)

(defwindow bar
  :exclusive true
  :monitor 0
  :windowtype "dock"
	:focusable false
  :stacking "fg"
  :geometry (geometry :x "0%"
                      :y "0.5%"
                      :width "99.5%"
                      :height "2%"
                      :anchor "bottom center")
  (barmenu_layout)
)
