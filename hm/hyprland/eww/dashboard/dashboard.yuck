(defwidget layout []
  (box :orientation "h" :space-evenly false :halign "center"
    (box :orientation "v" :space-evenly "false"
      (profile)
      (slider)
    )
    (box :orientation "v" :space-evenly false
      (spotify)
      (box :orientation "h" :space-evenly false
        (time)
        (weather)
      )
      (apps)
      (box :class "time" :vexpand true)
    )
    (box :class "time")
    (system)
  )
)

(defwidget profile []
  (box :class "profile" :orientation "v"
    (box :class "profile-picture")
    (box :orientation "v" :space-evenly "false"
      (label :class "profile-text" :text USER)
      (label :class "profile-subtext" :text HOST)
    )
  )
)

(defwidget slider []
  (box :class "slider" :orientation "v"
    (box :class "scale" :orientation "h" :space-evenly "false"
      (eventbox
        :onhover "${EWW_CMD} update MIC_HOVER=true"
        :onhoverlost "${EWW_CMD} update MIC_HOVER=false"
        (box :class {MIC_HOVER ? "hover-symbol"
          : SOURCE.MUTE == "MUTED" ? "micx-symbol"
          : "mic-symbol"}
          (label
            :class {MIC_HOVER ? "hover-text image" : "hidden"}
            :text  {SOURCE.VOL}
            :valign "center"
            :halign "center"
          )
        )
      )
      (scale 
        :class "db-scale_mic"
        :value {SOURCE.VOL}
        :onchange "./scripts/audio --set-source {}"
        :hexpand true
        :max 101
        :min 0
      )
    )
    (box :class "scale" :orientation "h" :space-evenly "false"
      (eventbox
        :onhover "${EWW_CMD} update AUDIO_HOVER=true"
        :onhoverlost "${EWW_CMD} update AUDIO_HOVER=false"
        (box 
          :class {AUDIO_HOVER ? "hover-symbol" 
            : SINK.MUTE == "MUTED" || SINK.VOL == 0 ? "speakerx-symbol"
            : SINK.VOL < 20 ? "speaker0-symbol"
            : SINK.VOL < 60 ? "speaker1-symbol"
            : "speaker2-symbol"}
          (label
            :class {AUDIO_HOVER ? "hover-text" : "hidden"}
            :text {SINK.VOL}
            :valign "center"
            :halign "center"
          )
        )
      )
      (scale 
        :class "db-scale_audio"
        :value {SINK.VOL}
        :onchange "./scripts/audio --set-sink {}"
        :hexpand true
        :max 101 
        :min 0
      )
    )
    (box :class "scale" :orientation "h" :space-evenly "false"
      (eventbox
        :onhover "${EWW_CMD} update BLIGHT_HOVER=true"
        :onhoverlost "${EWW_CMD} update BLIGHT_HOVER=false"
        (box :class {BLIGHT_HOVER ? "hover-symbol" : "brightness-symbol"}
          (label
            :class {BLIGHT_HOVER ? "hover-text" : "hidden"}
            :text "${BLIGHT}"
            :valign "center"
            :halign "center"
          )
        )
      )
      (scale 
        :class "db-scale_blight"
        :value BLIGHT
        :onchange "brightnessctl set {}%"
        :hexpand true
        :max 101
        :min 2
      )
    )
  )
)

(defwidget time []
  (box :orientation "v" :space-evenly true
    (box :class "time" :space-evenly false
      (box :class "clock")
      (box :orientation "v"
        (box :halign "start"
          (label :class "time-big" :text {formattime(EWW_TIME, "%H:%M")}))
        (box :halign "start"
          (label :class "time-small" :text {formattime(EWW_TIME, "%a, %b %d")}))
      )
    )
    (box :class "time" :orientation "h":space-evenly false
      (box :class "uptime")
      (box :orientation "v"
        (box :halign "start"
          (label :class "time-big" :text "${UPTIME.hours} hours"))
        (box :halign "start"
          (label :class "time-small" :text "${UPTIME.minutes} minutes"))
      )
    )
  )
)

(defwidget weather []
  (box
    :orientation "v"
    :class "weather"
    :space-evenly false
    :hexpand true
    (box :orientation "h"
      (box :orientation "v"
        (label
          :class "w-city"
          :style "color: ${WEATHER.hex}"
          :text "${WEATHER.city}, ${WEATHER.country}")
        (label :class "w-temp" :text "${round(WEATHER.temp, 0)}Â°C")
        (label
          :class "w-desc"
          :style "color: ${WEATHER.hex}"
          :text {WEATHER.desc})
      )
      (box :class {WEATHER.icon}

      )
    )
    (box :orientation "v"
      (label :class "wq1" :text {WEATHER.wq1})
      (label :class "wq2" :text {WEATHER.wq2})
    )
  )
)

(defwidget apps []
  (box :orientation "h" :space-evenly false
    (button :class "button github" :onclick "")
    (button :class "button bitbucket" :onclick "")
    (button :class "button nixos" :onclick "")
    (button :class "button outlook" :onclick "")
    (button :class "button gmail" :onclick "")
    (button :class "button trilium" :onclick "")
  )
)

(defwidget spotify []
  (box :class "spotify" :orientation "h" :space-evenly false :hexpand true
    (box :class "spotify_art"
      :style `background-image: url("${SPOTIFY.artUrl}");
`
    )
    (box :orientation "v" :hexpand true
      (label :class "title" :text {substring(SPOTIFY.title, 0, 40)})
      (label :class "artist" :text {substring(SPOTIFY.artist, 0, 50)})
      (box
        (button :class "prev"
          :onclick `scripts/spotify prev &&
            ${EWW_CMD} update SPOTIFY="$(scripts/spotify current)"`)
        (button :class {SPOTIFY.status == "Playing" ? "pause" : "play" }
          :onclick `scripts/spotify play &&
            ${EWW_CMD} update SPOTIFY="$(scripts/spotify current)"`)
        (button :class "next"
          :onclick `scripts/spotify next &&
            ${EWW_CMD} update SPOTIFY="$(scripts/spotify current)"`)
      )
    )
  )
)

(defwidget system []
  (box :orientation "v"
    (button :class "button shutdown" :onclick "shutdown 0")
    (button :class "button reboot" :onclick "reboot")
    (button :class "button lock" :onclick "${EWW_CMD} close dashboard; swaylock -fel")
    (button :class "button sleep" :onclick "${EWW_CMD} close dashboard; systemctl suspend -i")
    (button :class "button logout" :onclick "hyprctl dispatch exit")
  )
)

(defwindow dashboard
  :monitor 0
  :stacking "overlay"
  :geometry ( geometry
    :x "0%"
    :y "0%"
    :width "60%"
    :height "55%"
    :anchor "center"
    )
		(layout)
)
